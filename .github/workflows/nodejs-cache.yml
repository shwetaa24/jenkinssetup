name: Node.js CI with Cache

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Using the latest version of the checkout action.

    - name: Set up Node.js
      uses: actions/setup-node@v4 # Using the latest version of the setup-node action.
      with:
        node-version: '18' # Recommended to use a more recent LTS version like 18 or 20.

    # This step is a more robust way to get the cache path.
    - name: Get npm cache directory
      id: npm-cache-dir
      run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

    # The caching step is the most critical part.
    # The key uses the hash of package-lock.json to ensure the cache is invalidated
    # and rebuilt only when dependencies change. This is more reliable.
    - name: Cache Node.js modules
      uses: actions/cache@v4 # Using the latest version of the cache action.
      id: cache-node-modules
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # This conditional step is the core of the optimization.
    # It will only run `npm ci` if the cache was not found (a 'cache-hit' is not true).
    # This saves a lot of time on subsequent runs.
    - name: Install dependencies
      if: steps.cache-node-modules.outputs.cache-hit != 'true'
      run: npm ci

    - name: Run tests
      run: npm test
